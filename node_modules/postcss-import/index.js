me="Properties" valueType="REG_BINARY" value="00000000FF000000FF00000000000000000000000300000000C2010000FA0000" />
      <registryValue name="Reset" valueType="REG_SZ" value="ATZ&lt;cr&gt;" />
      <securityDescriptor name="62791918C58049A69FA4D51EF72F68381DD90E4C" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SYSTEM\DriverDatabase\DriverPackages\mdmc26a.inf_amd64_ecb1f5f6d3f763b2\Configurations\Modem1\Driver\Answer">
      <registryValue name="1" valueType="REG_SZ" value="ATA&lt;cr&gt;" />
      <securityDescriptor name="62791918C58049A69FA4D51EF72F68381DD90E4C" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SYSTEM\DriverDatabase\DriverPackages\mdmc26a.inf_amd64_ecb1f5f6d3f763b2\Configurations\Modem1\Driver\Fax">
      <registryValue name="SetupCommand" valueType="REG_SZ" value="ATS7=255&amp;D2&amp;K4" />
      <securityDescriptor name="62791918C58049A69FA4D51EF72F68381DD90E4C" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SYSTEM\DriverDatabase\DriverPackages\mdmc26a.inf_amd64_ecb1f5f6d3f763b2\Configurations\Modem1\Driver\Hangup">
      <registryValue name="1" valueType="REG_SZ" value="ATH&lt;cr&gt;" />
      <securityDescriptor name="62791918C58049A69FA4D51EF72F68381DD90E4C" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SYSTEM\DriverDatabase\DriverPackages\mdmc26a.inf_amd64_ecb1f5f6d3f763b2\Configurations\Modem1\Driver\Init">
      <registryValue name="1" valueType="REG_SZ" value="AT&lt;cr&gt;" />
      <registryValue name="2" valueType="REG_SZ" value="ATZE0V1&amp;D2X4\V1\X1S0=0&lt;cr&gt;" />
      <securityDescriptor name="62791918C58049A69FA4D51EF72F68381DD90E4C" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SYSTEM\DriverDatabase\DriverPackages\mdmc26a.inf_amd64_ecb1f5f6d3f763b2\Configurations\Modem1\Driver\Monitor">
      <registryValue name="1" valueType="REG_SZ" value="ATS0=0&lt;cr&gt;" />
      <registryValue name="2" valueType="REG_SZ" value="None" />
      <securityDescriptor name="62791918C58049A69FA4D51EF72F68381DD90E4C" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SYSTEM\DriverDatabase\DriverPackages\mdmc26a.inf_amd64_ecb1f5f6d3f763b2\Configurations\Modem1\Driver\Responses">
      <registryValue name="0&lt;cr&gt;" valueType="REG_BINARY" value="00000000000000000000" />
      <registryValue name="10&lt;cr&gt;" valueType="REG_BINARY" value="02006009000000000000" />
      <registryValue name="11&lt;cr&gt;" valueType="REG_BINARY" value="0200C012000000000000" />
      <registryValue name="12&lt;cr&gt;" valueType="REG_BINARY" value="02008025000000000000" />
      <registryValue name="13&lt;cr&gt;" valueType="REG_BINARY" value="0200201C000000000000" />
      <registryValue name="14&lt;cr&gt;" valueType="REG_BINARY" value="0200E02E000000000000" />
      <registryValue name="15&lt;cr&gt;" valueType="REG_BINARY" value="02004038000000000000" />
      <registryValue name="16&lt;cr&gt;" valueType="REG_BINARY" value="0200004B000000000000" />
      <registryValue name="17&lt;cr&gt;" valueType="REG_BINARY" value="02000096000000000000" />
      <registryValue name="18&lt;cr&gt;" valueType="REG_BINARY" value="020000E1000000000000" />
      <registryValue name="19&lt;cr&gt;" valueType="REG_BINARY" value="020000C2010000000000" />
      <registryValue name="1&lt;cr&gt;" valueType="REG_BINARY" value="02000000000000000000" />
      <registryValue name="22&lt;cr&gt;" valueType="REG_BINARY" value="0202B004000000000000" />
      <registryValue name="23&lt;cr&gt;" valueType="REG_BINARY" value="02026009000000000000" />
      <registryValue name="24&lt;cr&gt;" valueType="REG_BINARY" value="0202C012000000000000" />
      <registryValue name="25&lt;cr&gt;" valueType="REG_BINARY" value="0202201C000000000000" />
      <registryValue name="26&lt;cr&gt;" valueType="REG_BINARY" value="02028025000000000000" />
      <registryValue name="27&lt;cr&gt;" valueType="REG_BINARY" value="0202E02E000000000000" />
      <registryValue name="28&lt;cr&gt;" valueType="REG_BINARY" value="02          } else {
            const { nodes } = stmt
            const { parent } = nodes[0]

            let outerAtRule
            let innerAtRule
            if (stmt.media.length && stmt.layer.length) {
              const mediaNode = atRule({
                name: "media",
                params: stmt.media.join(", "),
                source: parent.source,
              })

              const layerNode = atRule({
                name: "layer",
                params: stmt.layer.join("."),
                source: parent.source,
              })

              mediaNode.append(layerNode)
              innerAtRule = layerNode
              outerAtRule = mediaNode
            } else if (stmt.media.length) {
              const mediaNode = atRule({
                name: "media",
                params: stmt.media.join(", "),
                source: parent.source,
              })

              innerAtRule = mediaNode
              outerAtRule = mediaNode
            } else if (stmt.layer.length) {
              const layerNode = atRule({
                name: "layer",
                params: stmt.layer.join("."),
                source: parent.source,
              })

              innerAtRule = layerNode
              outerAtRule = layerNode
            }

            parent.insertBefore(nodes[0], outerAtRule)

            // remove nodes
            nodes.forEach(node => {
              node.parent = undefined
            })

            // better output
            nodes[0].raws.before = nodes[0].raws.before || "\n"

            // wrap new rules with media query and/or layer at rule
            innerAtRule.append(nodes)

            stmt.type = "media"
            stmt.node = outerAtRule
            delete stmt.nodes
          }
        })
      }

      function applyStyles(bundle, styles) {
        styles.nodes = []

        // Strip additional statements.
        bundle.forEach(stmt => {
          if (["charset", "import", "media"].includes(stmt.type)) {
            stmt.node.parent = undefined
            styles.append(stmt.node)
          } else if (stmt.type === "nodes") {
            stmt.nodes.forEach(node => {
              node.parent = undefined
              styles.append(node)
            })
          }
        })
      }

      function parseStyles(result, styles, options, state, media, layer) {
        const statements = parseStatements(result, styles)

        return Promise.resolve(statements)
          .then(stmts => {
            // process each statement in series
            return stmts.reduce((promise, stmt) => {
              return promise.then(() => {
                stmt.media = joinMedia(media, stmt.media || [])
                stmt.parentMedia = media
                stmt.layer = joinLayer(layer, stmt.layer || [])

                // skip protocol base uri (protocol://url) or protocol-relative
                if (
                  stmt.type !== "import" ||
                  /^(?:[a-z]+:)?\/\//i.test(stmt.uri)
                ) {
                  return
                }

                if (options.filter && !options.filter(stmt.uri)) {
                  // rejected by filter
                  return
                }

                return resolveImportId(result, stmt, options, state)
              })
            }, Promise.resolve())
          })
          .then(() => {
            let charset
            const imports = []
            const bundle = []

            function handleCharset(stmt) {
              if (!charset) charset = stmt
              // charsets aren't case-sensitive, so convert to lower case to compare
              else if (
                stmt.node.params.toLowerCase() !==
                charset.node.params.toLowerCase()
              ) {
                throw new Error(
                  `Incompatable @charset statements:
  ${stmt.node.params} specified in ${stmt.node.source.input.file}
  ${charset.node.params} specified in ${charset.node.source.input.file}`
                )
              }
            }

            // squash statements and their children
            statements.forEach(stmt => {
              if (stmt.type === "charset") handleCharset(stmt)
              else if (stmt.type === "import") {
                if (stmt.children) {
                  stmt.children.forEach((child, index) => {
                    if (child.type === "import") imports.push(child)
                    else if (child.type === "charset") handleCharset(child)
                    else bundle.push(child)
                    // For better output
                    if (index === 0) child.parent = stmt
                  })
                } else imports.push(stmt)
              } else if (stmt.type === "media" || stmt.type === "nodes") {
                bundle.push(stmt)
              }
            })

            return charset
              ? [charset, ...imports.concat(bundle)]
              : imports.concat(bundle)
          })
      }

      function resolveImportId(result, stmt, options, state) {
        if (dataURL.isValid(stmt.uri)) {
          return loadImportContent(result, stmt, stmt.uri, options, state).then(
            result => {
              stmt.children = result
            }
          )
        }

        const atRule = stmt.node
        let sourceFile
        if (atRule.source?.input?.file) {
          sourceFile = atRule.source.input.file
        }
        const base = sourceFile
          ? path.dirname(atRule.source.input.file)
          : options.root

        return Promise.resolve(options.resolve(stmt.uri, base, options))
          .then(paths => {
            if (!Array.isArray(paths)) paths = [paths]
            // Ensure that each path is absolute:
            return Promise.all(
              paths.map(file => {
                return !path.isAbsolute(file)
                  ? resolveId(file, base, options)
                  : file
              })
            )
          })
          .then(resolved => {
            // Add dependency messages:
            resolved.forEach(file => {
              result.messages.push({
                type: "dependency",
                plugin: "postcss-import",
                file,
                parent: sourceFile,
              })
            })

            return Promise.all(
              resolved.map(file => {
                return loadImportContent(result, stmt, file, options, state)
              })
            )
          })
          .then(result => {
            // Merge loaded statements
            stmt.children = result.reduce((result, statements) => {
              return statements ? result.concat(statements) : result
            }, [])
          })
      }

      function loadImportContent(result, stmt, filename, options, state) {
        const atRule = stmt.node
        const { media, layer } = stmt

        assignLayerNames(layer, atRule, state, options)

        if (options.skipDuplicates) {
          // skip files already imported at the same scope
          if (state.importedFiles[filename]?.[media]?.[layer]) {
            return
          }

          // save imported files to skip them next time
          if (!state.importedFiles[filename]) {
            state.importedFiles[filename] = {}
          }
          if (!state.importedFiles[filename][media]) {
            state.importedFiles[filename][media] = {}
          }
          state.importedFiles[filename][media][layer] = true
        }

        return Promise.resolve(options.load(filename, options)).then(
          content => {
            if (content.trim() === "") {
              result.warn(`${filename} is empty`, { node: atRule })
              return
            }

            // skip previous imported files not containing @import rules
            if (state.hashFiles[content]?.[media]?.[layer]) {
              return
            }

            return processContent(
              result,
              content,
              filename,
              options,
              postcss
            ).then(importedResult => {
              const styles = importedResult.root
              result.messages = result.messages.concat(importedResult.messages)

              if (options.skipDuplicates) {
                const hasImport = styles.some(child => {
                  return child.type === "atrule" && child.name === "import"
                })
                if (!hasImport) {
                  // save hash files to skip them next time
                  if (!state.hashFiles[content]) {
                    state.hashFiles[content] = {}
                  }
                  if (!state.hashFiles[content][media]) {
                    state.hashFiles[content][media] = {}
                  }
                  state.hashFiles[content][media][layer] = true
                }
              }

              // recursion: import @import from imported file
              return parseStyles(result, styles, options, state, media, layer)
            })
          }
        )
      }
    },
  }
}

AtImport.postcss = true

module.exports = AtImport
